#include "test.h"

#test check_memcmp
	char str1[15];
	char str2[15];
	char longstr1[9999];
	char longstr2[9999];
	int ret;
	clock_t t;
	double time_taken;

	printf("CHECKING MEMCMP\n");
	memcpy(str1, "abcdef", 6);
	memcpy(str2, "ABCDEF", 6);

	ck_assert_int_eq(memcmp("", "", 0), ft_memcmp("", "", 0));
	ck_assert_int_eq(memcmp("", "", 1), ft_memcmp("", "", 1));
	ck_assert_int_eq(memcmp("Z", "Z", 1), ft_memcmp("Z", "Z", 1));
	ck_assert_int_eq(memcmp("a", "b", 1), ft_memcmp("a", "b", 1));
	ck_assert_int_eq(memcmp("b", "a", 1), ft_memcmp("b", "a", 1));
	ck_assert_int_eq(memcmp("a", "A", 1), ft_memcmp("a", "A", 1));
	ck_assert_int_eq(memcmp("ABx", "ABX", 3), ft_memcmp("ABx", "ABX", 3));

	t = clock();
	ret = memcmp(str1, str2, 5);
	t = clock() - t;
	time_taken = ((double)t) / CLOCKS_PER_SEC;
	printf("\tMemcmp took %f to execute\n", time_taken);
	ck_assert_int_gt(ret, 0);

	t = clock();
	ret = ft_memcmp(str1, str2, 5);
	t = clock() - t;
	time_taken = ((double)t) / CLOCKS_PER_SEC;
	printf("\tft_memcmp took %f to execute\n", time_taken);
	ck_assert_int_gt(ret, 0);

	memset(longstr1, 'a', 9999);
	memset(longstr2, 'a', 9999);

	t = clock();
	ret = memcmp(longstr1, longstr2, 9999);
	t = clock() - t;
	time_taken = ((double)t) / CLOCKS_PER_SEC;
	printf("\tMemcmp took %f to execute\n", time_taken);
	ck_assert_int_eq(ret, 0);

	t = clock();
	ret = ft_memcmp(longstr1, longstr2, 9999);
	t = clock() - t;
	time_taken = ((double)t) / CLOCKS_PER_SEC;
	printf("\tft_memcmp took %f to execute\n", time_taken);
	ck_assert_int_eq(ret, 0);
